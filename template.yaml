AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Badminton Recharging System

Globals:
  Function:
    Timeout: 20
    MemorySize: 128
    Runtime: python3.11
    Environment:
      Variables:
        ENV: dev
    LoggingConfig:
      LogFormat: JSON
  HttpApi:
    Auth:
      Authorizer: NONE

Resources:
  BadmintonRechargingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
#                Resource: !Sub '${ProductsS3.Arn}/*'
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"



  #  LambdaSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Security group for Lambda to access EFS
#      VpcId: vpc-0ee4f4a5109456563
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 2049
#          ToPort: 2049
##          SourceSecurityGroupId: !Ref LambdaSecurityGroup
#      Tags:
#        - Key: Name
#          Value: LambdaEFSAccess

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda access to EFS
      VpcId: vpc-0ee4f4a5109456563

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS ingress from Lambda
      VpcId: vpc-0ee4f4a5109456563
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  BadmintonRechargingEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref BadmintonRechargingEFS
      SubnetId: subnet-0c6d1e1b83be3be52
      SecurityGroups:
        - !Ref EFSSecurityGroup

  BadmintonRechargingDBAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref BadmintonRechargingEFS
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "750"
        Path: "/lambda"

  ApiBadmintonRechargingDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  SwaggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./swagger
      Handler: main.lambda_handler
      Architectures:
        - x86_64
      Events:
        SwaggerGet:
          Type: Api
          Properties:
            Path: /api/swagger
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment

  PlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt BadmintonRechargingRole.Arn
      CodeUri: ./
      Handler: lambda_api/players.lambda_handler
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0c6d1e1b83be3be52
      FileSystemConfigs:
        - Arn: !GetAtt BadmintonRechargingDBAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Events:
        getPlayers:
          Type: Api
          Properties:
            Path: /api/players
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment

  SessionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt BadmintonRechargingRole.Arn
      CodeUri: ./
      Handler: lambda_api/sessions.lambda_handler
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0c6d1e1b83be3be52
      FileSystemConfigs:
        - Arn: !GetAtt BadmintonRechargingDBAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Events:
        getSessions:
          Type: Api
          Properties:
            Path: /api/sessions
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        getSessionAttributesData:
          Type: Api
          Properties:
            Path: /api/sessions/attributes-data
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        getSessionTemplates:
          Type: Api
          Properties:
            Path: /api/sessions/templates
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        getBillingTypes:
          Type: Api
          Properties:
            Path: /api/sessions/billing-types
            Method: get
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        postSessions:
          Type: Api
          Properties:
            Path: /api/sessions
            Method: post
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        postCalcCostEqually:
          Type: Api
          Properties:
            Path: /api/sessions/calc-cost-equally
            Method: post
            RestApiId: !Ref ApiBadmintonRechargingDeployment
        postCalcCostWeighted:
          Type: Api
          Properties:
            Path: /api/sessions/calc-cost-weighted
            Method: post
            RestApiId: !Ref ApiBadmintonRechargingDeployment

  EFSHandler:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt BadmintonRechargingRole.Arn
      CodeUri: ./
      Handler: lambda_api/efs_handler.lambda_handler
      Timeout: 100
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0c6d1e1b83be3be52
      FileSystemConfigs:
        - Arn: !GetAtt BadmintonRechargingDBAccessPoint.Arn
          LocalMountPath: /mnt/efs


#  SessionsFunctionV2:
#    Type: AWS::Serverless::Function
#    Properties:
#      Role: !GetAtt BadmintonRechargingRole.Arn
#      CodeUri: ./
#      Handler: lambda_api/sessions.lambda_handler
#      Architectures:
#        - x86_64
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroup
#        SubnetIds:
#          - subnet-0c6d1e1b83be3be52
#      Events:
#        getSessionTemplates:
#          Type: Api
#          Properties:
#            Path: /api/sessions/templates
#            Method: get
#            RestApiId: !Ref ApiBadmintonRechargingDeployment
#        getBillingTypes:
#          Type: Api
#          Properties:
#            Path: /api/sessions/billing-types
#            Method: get
#            RestApiId: !Ref ApiBadmintonRechargingDeployment
#        postCalcCostEqually:
#          Type: Api
#          Properties:
#            Path: /api/sessions/calc-cost-equally
#            Method: post
#            RestApiId: !Ref ApiBadmintonRechargingDeployment
#        postCalcCostWeighted:
#          Type: Api
#          Properties:
#            Path: /api/sessions/calc-cost-weighted
#            Method: post
#            RestApiId: !Ref ApiBadmintonRechargingDeployment

